@using ObCore.Helpers
@using ObCore
@model ObCore.Models.Notification
@*
Comment
FOP Shared
FOPs Shared
Friended
Private Message
Profile View


*@
<tr @Html.Raw(Model.HtmlDataAttribute)>
	<td>
		@if (!Model.EventType.Equals("Profile View")) {
			@Model.IdPictureMember.MemberProfilePicture(PictureSize.Small50Px, Model.IdMemberFrom, Model.Login)
  }
	</td>
	<td>
		<h3>@Model.IdMemberFrom.MemberProfileA(Model.Login) @Model.EventType.EventTypeToPastTenseSecondPerson() <small>@Model.EventTime.ToRelativeDateDetailed()</small></h3>
		@{
			switch (@Model.EventType) {
				case "Comment":
			<p>
				<strong>"@Html.DisplayFor(modelItem => @Model.Body)"</strong>
			</p>
					break;
				case "FOP Shared":
				case "FOPs Shared":
			<p>
				@Model.FopGuid1.FopThumbImgA(PictureSize.Thumb75Px)
				@Model.FopGuid2.FopThumbImgA(PictureSize.Thumb75Px)
				@Model.FopGuid3.FopThumbImgA(PictureSize.Thumb75Px)
				@if (@Model.Quantity > 3) {
		<strong>+ @(@Model.Quantity-3) more...</strong>
				}
			</p>
					break;
				
				case "Private Message":
			
			<h4>@Html.DisplayFor(m => @Model.Subject)</h4>
			<blockquote>@Model.Body.Until("-------[").TruncateFriendly(225)</blockquote>			
					break;
				case "Friended":
				case "Profile View":
				break;
			default:
			<p>
				@Html.DisplayFor(m => @Model.Body.TruncateFriendly(225))
			</p>
			
break;
			}
		}
	</td>
</tr>
